---
description: 
globs: 
alwaysApply: true
---
# üß† .cursorrules ‚Äì Tienda Digital "Jenny Kids" üë∂ (Next.js 14 + Supabase + MercadoPago üá®üá¥)

Este proyecto es una tienda digital moderna, responsiva y optimizada para Colombia. Usa tecnolog√≠as modernas para ofrecer una experiencia fluida, segura y adaptable desde m√≥viles hasta escritorio. Este archivo configura a la IA de Cursor para ayudarte a generar c√≥digo limpio, funcional y alineado con las mejores pr√°cticas de Next.js 14, Tailwind CSS y TypeScript.

---

## üöÄ Stack tecnol√≥gico

- **Next.js 14** con App Router y Server Components
- **TypeScript** en todo el c√≥digo
- **Tailwind CSS** para estilizado 100% utilitario
- **Supabase** para:
  - Autenticaci√≥n
  - Base de datos PostgreSQL
  - Almacenamiento de productos e im√°genes
- **MercadoPago** para pagos en Colombia (preferencia + webhook)
- **Vercel** como plataforma de despliegue

---

## üìÅ Estructura recomendada

apps/
‚îî‚îÄ‚îÄ web/              ‚Üí Frontend principal (Next.js)

packages/
‚îú‚îÄ‚îÄ ui/               ‚Üí Componentes reutilizables (Button, ProductCard, etc.)
‚îú‚îÄ‚îÄ db/               ‚Üí Supabase: esquema, queries, funciones de acceso
‚îî‚îÄ‚îÄ utils/            ‚Üí Funciones auxiliares y validaciones globales

---

## üé® Estilos (Tailwind CSS + Shadcn UI)

- Usa solo clases de Tailwind (evitar CSS externo).
- Agrupa clases condicionales con `clsx()` o `cn()`.
- Usa `@shadcn/ui` y `radix-ui` para modales, tabs, tooltips, etc.
- Dise√±a siempre **mobile-first**.
- Sigue una escala de espaciado y tipograf√≠a consistente (`text-sm`, `font-medium`, etc.).

---

## üîê Autenticaci√≥n con Supabase

- Soporta login con email/password y Magic Link.
- Maneja sesiones con el cliente oficial de Supabase.
- Protege rutas y componentes privados con l√≥gica de autenticaci√≥n en el servidor.

---

## üõí E-commerce funcional

- Modela estas entidades en Supabase:
  - `products`, `categories`, `cart_items`, `orders`
- Implementa l√≥gica CRUD usando Server Actions o API routes.
- Subida de im√°genes de productos usando Supabase Storage.
- Integraci√≥n con MercadoPago (ver siguiente secci√≥n).

---

## üí≥ Pagos con MercadoPago üá®üá¥

- Usa el SDK oficial de MercadoPago (Node.js).
- Flujo:
  1. `/api/create-order`: genera preferencia de pago y retorna `init_point`
  2. Redirecci√≥n a MercadoPago
  3. Callback a `/success` o `/failure`
  4. Webhook a `/api/mercadopago-webhook` actualiza estado del pedido
- Moneda: **COP**
- M√©todos: Tarjetas locales, PSE, Efectivo
- Usa variables de entorno seguras:
  ```env
  MP_ACCESS_TOKEN=***
  MP_PUBLIC_KEY=***


üß± Componentes y arquitectura
	‚Ä¢	Sigue arquitectura component-based.
	‚Ä¢	Usa Server Components por defecto.
	‚Ä¢	Usa Client Components solo cuando se necesite interactividad (ej. modales, formulario controlado).
	‚Ä¢	Define interfaces TypeScript para props:

interface ProductCardProps {
  title: string;
  price: number;
}

export const ProductCard = ({ title, price }: ProductCardProps) => {
  return (...)
};

‚öôÔ∏è Data fetching y rutas
	‚Ä¢	Usa fetch() en Server Components:
	const res = await fetch('https://api.jennykids.com/data', { next: { revalidate: 3600 } })

	‚Ä¢	Crea rutas API con App Router en archivos route.ts.
	‚Ä¢	Usa loading.tsx, error.tsx, y not-found.tsx donde apliquen.
	‚Ä¢	Aplica SSG o SSR seg√∫n corresponda por p√°gina.

---

## üßë‚Äçüíº Panel de administraci√≥n y manejo de roles

- Implementar un **panel administrativo** accesible solo para usuarios autenticados con rol `admin`.
- Los roles (`admin`, `customer`) deben almacenarse en Supabase, preferiblemente en la tabla `users` o como una columna adicional en `public.profiles`.
- El panel `/admin` debe permitir:
  - Crear, editar y eliminar productos
  - Gestionar categor√≠as
  - Visualizar y actualizar el estado de los pedidos
- Proteger rutas con validaci√≥n de sesi√≥n y rol, tanto desde el servidor como desde el cliente si es necesario.
- Implementar el layout `AdminLayout` con navegaci√≥n lateral o superior.
- Solo usuarios con rol `admin` deben poder acceder y modificar datos del ecommerce.
- Los formularios del panel deben incluir validaci√≥n con `zod` y manejar el estado con `useFormState` o `useActionState`.
- Si el usuario no tiene permisos, redirigirlo a una p√°gina de acceso denegado (`/unauthorized`) o al home.

Ejemplo de verificaci√≥n de rol en Server Component:
```ts
import { getSession } from '@/lib/supabase';

export default async function AdminPage() {
  const { user } = await getSession();
  if (user?.role !== 'admin') {
    redirect('/unauthorized');
  }

  // Renderizar panel de administraci√≥n
}

---

üß† SEO y accesibilidad
	‚Ä¢	Usa metadata para cada p√°gina:

	import type { Metadata } from 'next';
	export const metadata: Metadata = {
  		title: 'Inicio | Jenny Kids',
  		description: 'Tienda de ropa infantil en Colombia',
	};


	‚Ä¢	Usa Image de Next.js para im√°genes optimizadas.
	‚Ä¢	Usa ARIA labels y HTML sem√°ntico (<main>, <nav>, <section>) para accesibilidad.

---

üõ†Ô∏è Convenciones adicionales
	‚Ä¢	Exportar componentes con export const
	‚Ä¢	Solo usar 'use client' si el componente lo requiere
	‚Ä¢	Evita tipos redundantes; deja que TypeScript infiera donde sea posible
	‚Ä¢	Usa React.FC o React.ReactNode solo si es necesario
	‚Ä¢	Usa .env.local para configuraci√≥n


---

üîÑ Buenas pr√°cticas y calidad de c√≥digo
	‚Ä¢	Usa zod para validaci√≥n de formularios
	‚Ä¢	Implementa useActionState o server actions para manejar formularios desde el servidor
	‚Ä¢	Evita any; usa tipado expl√≠cito
	‚Ä¢	Usa control de errores estructurado (try/catch, throw new Error)
	‚Ä¢	Implementa lazy loading, code splitting y revalidaci√≥n
	‚Ä¢	Usa date-fns para manejo de fechas
	‚Ä¢	Utiliza comentarios 


‚∏ª

üéØ Reglas de salida para IA (Cursor)
	‚Ä¢	Generar componentes completos en .tsx, con imports y exports
	‚Ä¢	Usar Tailwind exclusivamente
	‚Ä¢	Respetar la estructura de carpetas sugerida
	‚Ä¢	El c√≥digo debe funcionar en Vercel y Supabase
	‚Ä¢	No dejar TODOs o fragmentos incompletos
	‚Ä¢	Preferir ejemplos listos para producci√≥n

---

## üßæ Comentarios y documentaci√≥n en el c√≥digo

  - Todo c√≥digo generado debe incluir comentarios en las secciones clave, explicando:
  - L√≥gica del flujo
  - Comportamiento de componentes
  - Uso de props o dependencias externas
  - Raz√≥n de decisiones t√©cnicas (como manejo de errores, SSR vs SSG)

- Usa comentarios claros y breves, en espa√±ol. Ejemplo:
  ```tsx
  // Renderiza la tarjeta de producto con nombre, imagen y precio

	‚Ä¢	Cuando se implemente un componente o se use uno ya existente, referencia en el comentario el nombre:

	// Usa el componente ProductCard para mostrar cada producto

	‚Ä¢	En formularios, rutas API, y l√≥gica de negocio, documentar validaciones, flujos condicionales, documentar claramente el prop√≥sito:

	// Verifica que el total del carrito sea mayor a cero antes de crear la orden

	‚Ä¢	Los comentarios deben ser en espa√±ol, concisos, y ayudar al futuro mantenimiento del c√≥digo.
	‚Ä¢	Evitar comentarios triviales como ‚Äúesto es un bot√≥n‚Äù, aunque para mi nivel puedes hacerlo.

	
---


